// Generated by gencpp from file unitree_legged_msgs/walk_2s.msg
// DO NOT EDIT!


#ifndef UNITREE_LEGGED_MSGS_MESSAGE_WALK_2S_H
#define UNITREE_LEGGED_MSGS_MESSAGE_WALK_2S_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <unitree_legged_msgs/HighCmd.h>

namespace unitree_legged_msgs
{
template <class ContainerAllocator>
struct walk_2s_
{
  typedef walk_2s_<ContainerAllocator> Type;

  walk_2s_()
    : highcmd()
    , time(0)  {
    }
  walk_2s_(const ContainerAllocator& _alloc)
    : highcmd(_alloc)
    , time(0)  {
  (void)_alloc;
    }



   typedef  ::unitree_legged_msgs::HighCmd_<ContainerAllocator>  _highcmd_type;
  _highcmd_type highcmd;

   typedef uint8_t _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> const> ConstPtr;

}; // struct walk_2s_

typedef ::unitree_legged_msgs::walk_2s_<std::allocator<void> > walk_2s;

typedef boost::shared_ptr< ::unitree_legged_msgs::walk_2s > walk_2sPtr;
typedef boost::shared_ptr< ::unitree_legged_msgs::walk_2s const> walk_2sConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_legged_msgs::walk_2s_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_legged_msgs::walk_2s_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::walk_2s_<ContainerAllocator2> & rhs)
{
  return lhs.highcmd == rhs.highcmd &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_legged_msgs::walk_2s_<ContainerAllocator1> & lhs, const ::unitree_legged_msgs::walk_2s_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_legged_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ebd7568fa6af7345908f1980cd95973";
  }

  static const char* value(const ::unitree_legged_msgs::walk_2s_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ebd7568fa6af734ULL;
  static const uint64_t static_value2 = 0x5908f1980cd95973ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_legged_msgs/walk_2s";
  }

  static const char* value(const ::unitree_legged_msgs::walk_2s_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> >
{
  static const char* value()
  {
    return "HighCmd highcmd\n"
"uint8 time\n"
"\n"
"================================================================================\n"
"MSG: unitree_legged_msgs/HighCmd\n"
"uint8 levelFlag\n"
"uint16 commVersion              # Old version Aliengo does not have\n"
"uint16 robotID                  # Old version Aliengo does not have\n"
"uint32 SN                       # Old version Aliengo does not have\n"
"uint8 bandWidth                 # Old version Aliengo does not have\n"
"uint8 mode\n"
"float32 forwardSpeed\n"
"float32 sideSpeed\n"
"float32 rotateSpeed	\n"
"float32 bodyHeight\n"
"float32 footRaiseHeight\n"
"float32 yaw\n"
"float32 pitch\n"
"float32 roll\n"
"LED[4] led\n"
"uint8[40] wirelessRemote\n"
"uint8[40] AppRemote             # Old version Aliengo does not have\n"
"uint32 reserve                  # Old version Aliengo does not have\n"
"int32 crc\n"
"================================================================================\n"
"MSG: unitree_legged_msgs/LED\n"
"uint8 r\n"
"uint8 g\n"
"uint8 b\n"
;
  }

  static const char* value(const ::unitree_legged_msgs::walk_2s_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.highcmd);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct walk_2s_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_legged_msgs::walk_2s_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_legged_msgs::walk_2s_<ContainerAllocator>& v)
  {
    s << indent << "highcmd: ";
    s << std::endl;
    Printer< ::unitree_legged_msgs::HighCmd_<ContainerAllocator> >::stream(s, indent + "  ", v.highcmd);
    s << indent << "time: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_LEGGED_MSGS_MESSAGE_WALK_2S_H
